<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jsp/jstl/core"
      xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:a="http://xmlns.jcp.org/jsf/passthrough"
      xmlns:h="http://xmlns.jcp.org/jsf/html">

<h:head>
    <title>Edit Sections</title>
    <h:outputStylesheet name="bootstrap.min.css" library="css"/>
    <h:outputStylesheet name="main.css" library="css"/>
    <style type="text/css">
        tr {
            height: 20px;
        }

        .dummy {
            background-color: darkgrey !important;
            line-height: 150%;
            cursor: pointer;
        }

        .dummy > th {
            text-align: center;
            font-size: 250%;
            color: white;
        }

        .new-parameter {
            background-color: greenyellow;
        }

        .parameter-value {
            display: inline-block;
        }

        .btn-danger {
            display: compact;
            float: right;
            transform: scale(.5);
        }

        .repeated {
            background-color: red !important;
        }
    </style>
</h:head>
<h:body>

    <div class="site-header sticky-top py-1">
        <div class="container d-flex flex-column flex-md-row justify-content-between">
            <a class="py-2 d-md-inline-block" href="logout">Logout</a>
            <a class="py-2 d-md-inline-block" href="myauctions.xhtml">My Auctions</a>
            <a class="py-2 n-none d-md-inline-block">Allezon</a>
        </div>
    </div>
    <div class="mx-auto my-4" style="display: table">
        Click on a section to edit its categories
    </div>
    <table class="table table-striped m-auto w-25">
        <thead>
        <tr>
            <th scope="col">Section name</th>
        </tr>
        </thead>
        <tbody>
        <c:forEach var="section" items="${sectionController.allSections}">
            <tr>
                <td class="parameter">
                    <div style="cursor: pointer" class="parameter-value"
                         onclick="window.location='editcategories.xhtml?section_id=#{section.id}'">${section.name}</div>
                    <button class="btn btn-danger">X</button>
                </td>
            </tr>
        </c:forEach>
        <tr class="dummy">
            <th>+</th>
        </tr>
        </tbody>
    </table>

    <h:form id="formId">
        <h:inputHidden value="#{parameterRequest.addedParameters}" id="addedParameters"/>
        <h:inputHidden value="#{parameterRequest.removedParameters}" id="removedParameters"/>

        <h:commandButton value="Commit changes" action="#{sectionController.commitSections}" id="commandButton"/>
    </h:form>

    <script type="text/javascript">
        function deleteFromArray(array, obj) {
            let i = array.indexOf(obj);
            if (i !== -1)
                array.splice(array.indexOf(obj), 1);
        }

        document.onkeydown = function (e) {
            if (e.key === 'x')
                console.log(addedParameters, removedParameters);
            if (e.key === 'Enter')
                document.getElementsByClassName('dummy')[0].onclick();
            if (e.key === 'Delete') {
                let warningMessage = document.getElementsByClassName('repeated');
                if (warningMessage.length !== 0) {
                    warningMessage[0].parentElement.remove();
                    return
                }
                let elements = document.getElementsByClassName('parameter');
                console.log(elements.constructor.name);
                if (elements.length > 0)
                    elements[elements.length - 1].children[1].onmousedown();
            }
        };

        let addedParameters = [];
        let removedParameters = [];
        let previousParameters = [];

        for (let i of document.getElementsByClassName('parameter-value'))
            previousParameters.push(i.textContent);

        function focusFirstInput() {
            let e = document.getElementsByClassName('unfinished')[0];
            if (e) e.focus()
        }

        function deleteTheMessage() {
            for (let i of document.getElementsByClassName('repeated'))
                i.parentElement.remove();
        }

        function giveListenerToButtons() {
            for (let parameter of document.getElementsByClassName('parameter')) {

                let parameterValue = parameter.children[0].textContent;

                parameter.children[1].onmousedown = function () {
                    parameter.parentElement.remove();
                    for (let i of document.getElementsByClassName('unfinished')) i.parentElement.remove();
                    if (addedParameters.includes(parameterValue))
                        deleteFromArray(addedParameters, parameterValue);
                    else {
                        removedParameters.push(parameterValue);
                        deleteFromArray(previousParameters, parameterValue)
                    }
                }
            }
        }

        function giveListenerToInputs() {

            for (let i of document.getElementsByClassName('unfinished')) {
                i.onchange = function () {
                    deleteTheMessage();
                    let newValue = this.value;

                    if (addedParameters.includes(newValue) || previousParameters.includes(newValue))
                        this.parentElement.innerHTML = '<td class="new-parameter repeated">' + 'This value already exists' + '</td>';
                    else if (removedParameters.includes(newValue)) {
                        deleteFromArray(removedParameters, newValue);
                        this.parentElement.innerHTML = '<td class="parameter"><div class="parameter-value">' + newValue + '</div><button class="btn btn-danger">X</button></td>';
                    } else {
                        addedParameters.push(newValue);
                        this.parentElement.innerHTML = '<td class="parameter new-parameter"><div class="parameter-value">' + newValue + '</div><button class="btn btn-danger">X</button></td>';
                    }

                    giveListenerToButtons();
                    focusFirstInput();
                }
            }
        }

        giveListenerToButtons();

        document.getElementsByClassName('dummy')[0].onclick = function () {
            deleteTheMessage();

            if (document.getElementsByClassName('unfinished').length === 0) {

                let tr = document.createElement('tr');
                let inputElement = document.createElement('input');
                inputElement.setAttribute('class', 'unfinished');
                inputElement.setAttribute('type', 'text');
                tr.appendChild(inputElement);

                document.getElementsByTagName('tbody')[0].insertBefore(tr, this);

                giveListenerToInputs();
                focusFirstInput();
            }
        };

        document.getElementById('formId:commandButton').onmousedown = function () {
            document.getElementsByName('formId:addedParameters')[0].value = addedParameters.join('|');
            document.getElementsByName('formId:removedParameters')[0].value = removedParameters.join('|');
        }
    </script>
</h:body>
</html>